# equals()和==的区别
首先，equals()是一个方法；而==是一个运算符，表示内存地址是否相同。

在JAVA的祖先类Object中对equals的定义为：
~~~
public boolean equals(Object obj) {
    return (this == obj);
}
~~~
这表明原始的equals方法跟==是等价的。

** 数据类型方面 **

如 byte, char, short, int, long, float, double, boolean这八种基本数据类型，== 就是表示数量相等，由于不是对象，所以不能使用equals()方法，但是其Integer, Float类可以使用。

** 对象方面 **

如Integer，String和用户自定义的类，== 表示其内存地址是否相同；equals其比较规则则为：当参数obj引用的对象与当前对象为同一个对象时，就返回true,否则返回false。

*而JDK类中有一些类覆盖了oject类的equals()方法，比较规则为：**如果两个对象的类型一致，并且内容一致，则返回true**,这些类有： java.io.file,  java.util.Date,  java.lang.string  包装类（Integer,Double等）*

其中，String比较特殊，具体见如下代码：
~~~
String foo = "loveu";
String bar = "loveu";
System.out.println(foo == bar);      // 输出为 true
System.out.println(foo.equals(bar)); // 输出为 true

//String foo = new String("loveu");
//String bar = new String("loveu");
//System.out.println(foo == bar);      // 输出为 false
//System.out.println(foo.equals(bar)); // 输出为 true
~~~
上述代码中，第1段中，2个的"loveu"是字符串常量，存放在常量池里，共用1块内存空间，所以内存地址相同，== 结果为true，String类里的equals方法已经被重写，只要内容相同，返回就为true（具体请参见附1），所以equals的结果也为true；第2段代码中，新建2个字符串对象，内存地址不同，内容相同，故结果分别为false和true。

** 自定义equals()方法 **

首先，在重写equals方法时，要注意满足离散数学上的特性：
* 自反性 ：对任意引用值X，x.equals(x)的返回值一定为true；
* 对称性： 对于任何引用值x,y,当且仅当y.equals(x)返回值为true时，x.equals(y)的返回值一定为true;
* 传递性：如果x.equals(y)=true, y.equals(z)=true,则x.equals(z)=true；
* 一致性：如果参与比较的对象没任何改变，则对象比较的结果也不应该有任何改变；
* 非空性：任何非空的引用值X，x.equals(null)的返回值一定为false。

重新定义时，equals()的形参一定保持为Object类型
>public boolean equals(Object obj)

一般而言，重写equals()都会建议按规则重写hashCode()方法，hashCode()重写的目的最重要的在于使用集合框架时会用到，重写会提高效率。如果自定义类作为map的key，那么hashCode()就得重写了。但一般情况下并没有必要。

** 总结 **

1. 基本对象类型直接用==比较，因为他们的变量存的就是值。
2. 对象类型可以用==比较，此时比较的是这个引用存的地址（注:此地址是内存地址，不同于hash值），就是那么一串应该是十六进制的数字。也就是说只有是同一个对象才是true。
3. 对象比较一般用equals()比较，代表两个对象类似，在大部分类中，只要两个对象类型一致且值一致，则返回true。


附1
~~~
public boolean equals(Object anObject) {
    if (this == anObject) {
        return true;
    }
    if (anObject instanceof String) {
        String anotherString = (String)anObject;
        int n = value.length;
        if (n == anotherString.value.length) {
            char v1[] = value;
            char v2[] = anotherString.value;
            int i = 0;
            while (n-- != 0) {
                if (v1[i] != v2[i])
                    return false;
                i++;
            }
            return true;
        }
    }
    return false;
}
~~~
